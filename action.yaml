name: Submodule Updater
description: Keep up to date with your submodules

inputs:
  token:
    description: an access token to be used to fork, clone, push, and open PRs
    required: true
  source-repository:
    description: the dependent repository to be referred as submodules by
      other repositories (e.g., org/repo-name)
    required: true
    default: ${{ github.repository }}
  ref:
    description: submodule heads in the dependent repositories will become to
      refer to to this (e.g., refs/tags/1.2.3, refs/heads/master)
    required: true
    default: ${{ github.ref }}
  committer:
    description: name and email address to be signed with on the commit
      (e.g., Your Name <email@example.com>)
    required: true
  targets:
    description: space-separated list of the dependent repositories with their
      branch names that need to update their submodules referring the source
      repository (e.g., org/repo-name:branch org/foo:main org/bar:master)
    required: true
  pr-title:
    description: the title template for pull requests to be opened.
      it can consist of several variables like {submodule_repository.name}.
      see also docs for details
    required: true
    default: Update {submodule_repository.name} to {submodule_ref_name}
  pr-description:
    description: the description template for pull requests to be opened.
      it can consist of several variables like {submodule_repository.name}.
      see also docs for details
    required: true
    default: >
      *This pull request was automatically generated by Submodule Updater.*


      It updates the submodule referring to
      [*{submodule_repository.name}*]({submodule_repository.html_url}) to
      {submodule_ref_type} *{submodule_ref_name}*
      ({submodule_repository.full_name}@{submodule_commit.sha}).
  dry-run:
    description: don't run the actual process.  internally used for testing
      the action in itself
    default: false

runs:
  using: composite
  steps:
  - if: runner.os == 'Linux'
    uses: actions/setup-python@v3
    with:
      python-version: "3.9"
  - if: runner.os != 'Windows'
    working-directory: ${{ github.action_path }}
    env:
      TOKEN: ${{ inputs.token }}
      SOURCE_REPOSITORY: ${{ inputs.source-repository }}
      REF: ${{ inputs.ref }}
      COMMITTER: ${{ inputs.committer }}
      TARGETS: ${{ inputs.targets }}
      PR_TITLE: ${{ inputs.pr-title}}
      PR_DESCRIPTION: ${{ inputs.pr-description }}
      DRY_RUN: ${{ inputs.dry-run }}
    shell: bash
    run: |
      set -evx
      python3.9 -m venv .venv
      .venv/bin/pip3 install -U pip setuptools flit
      .venv/bin/pip3 install -e .
      if [[ "$DRY_RUN" == "true" ]]; then
        dry_run_opt=--dry-run
      fi
      .venv/bin/python3 -m sur \
        --github-token="$TOKEN" \
        --source-repository="$SOURCE_REPOSITORY" \
        --ref="$REF" \
        --committer="$COMMITTER" \
        --pr-title="$PR_TITLE" \
        --pr-description="$PR_DESCRIPTION" \
        $dry_run_opt \
        $TARGETS
  - if: runner.os == 'Windows'
    working-directory: ${{ github.action_path }}
    env:
      TOKEN: ${{ inputs.token }}
      SOURCE_REPOSITORY: ${{ inputs.source-repository }}
      REF: ${{ inputs.ref }}
      COMMITTER: ${{ inputs.committer }}
      TARGETS: ${{ inputs.targets }}
      PR_TITLE: ${{ inputs.pr-title}}
      PR_DESCRIPTION: ${{ inputs.pr-description }}
      DRY_RUN: ${{ inputs.dry-run }}
    shell: pwsh
    run: |
      $ErrorActionPreference = "Stop"
      Set-PSDebug -Trace 2
      py -3.9 -m venv .venv
      .venv\Scripts\python -m pip install -U pip setuptools flit
      .venv\Scripts\pip install -e .
      if ($env:DRY_RUN -eq "true") {
        $dryRunOpt = ,"--dry-run"
      } else {
        $dryRunOpt = @()
      }
      .venv\Scripts\python -m sur `
        --github-token="$env:TOKEN" `
        --source-repository="$env:SOURCE_REPOSITORY" `
        --ref="$env:REF" `
        --committer="$env:COMMITTER" `
        --pr-title="$env:PR_TITLE" `
        --pr-description="$env:PR_DESCRIPTION" `
        $dryRunOpt `
        ($env:TARGETS.Trim() -split "\s+")
